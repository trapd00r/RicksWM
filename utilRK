#!/usr/bin/perl

# Copyright (C) 2006-2008 Rick Klement
$putilRK::VERSION = '$Revision: 1.12 $';

use strict;
$| = 1;

my ($server) = $ENV{DISPLAY} =~ /.*(:\d+)/ or
  die "invalid DISPLAY env var <$ENV{DISPLAY}>";
my $filename = "/tmp/RicksWM.cmd$server";
my $listname = "/tmp/RicksWM.state$server";
my $colorfile = "$ENV{HOME}/.utilRKrc";
my (@lines, $workspace, @workspaces);

help() unless @ARGV;

sub fifo
  {
  s/\n*\z/\n/ for my $output = "@_";
  -p $filename or die "$0: fifo $filename does not exist";
  open my $fifo, '>', $filename or die "$0: $! on fifo open";
  print $fifo $output;
  close $fifo;
  }

if(grep /^(list|newws|forward|backward|bottom|color)/, @ARGV)
  {
  open my $fh, $listname or die "$0: $! opening $listname";
  ($workspace, @lines) = <$fh>;
  chomp $workspace;
  @workspaces = sort grep ! /^sticky$/,
    keys %{{map {/\t(.+?)\t/, 1} @lines, "\tmain\t"}};
  }

while($_ = shift)
  {
  if( /^list\w+$/ )
    {
    'LIST'->$_();
    }
  elsif(
    /^(movetocurrentws|raise|lower|setcurrentws|ws|bg|shieldstep|zoom)$/
    && @ARGV)
    {
    fifo "$_ @{[shift()]}\n";
    }
  elsif( /^color$/ && @ARGV)
    {
    my $color = shift;
    my $data;
    if(open my $f, '<', $colorfile)
      {
      local $/;
      $data = <$f>;
      close $f;
      }
    s/.*,$workspace\n//g for $data;
    open my $f, '>', $colorfile;
    print $f $data, "$color,$workspace\n";
    close $f;
    fifo "bg $color";
    }
  elsif( /^(raiseover)$/ && @ARGV > 1)
    {
    fifo $_, shift(), shift();
    }
  elsif( /^(lowerunder)$/ && @ARGV > 1)
    {
    fifo $_, shift(), shift();
    }
  elsif( /^(movetows)$/ && @ARGV > 1)
    {
    fifo $_, shift(), shift();
    }
  elsif( /^(xy)$/ && @ARGV > 2)
    {
    fifo $_, shift, shift, shift;
    }
  elsif( /^newws$/ )
    {
    my %ws = map { /\t(.+?)\t/, 1 } @lines;
    my ($newws) = (grep(!$ws{$_}, 'ws01'..'ws99'), 'VeryLastName');
    fifo "ws $newws";
    }
  elsif( /^forward$/ )
    {
    my %ws;
    @ws{@workspaces} = @workspaces[1..$#workspaces, 0];
    my $ws = $ws{$workspace} || 'main';
    fifo "ws $ws";
    }
  elsif( /^backward$/ )
    {
    my %ws;
    @ws{@workspaces} = @workspaces[-1..$#workspaces];
    my $ws = $ws{$workspace} || 'main';
    fifo "ws $ws";
    }
  elsif( /^bottom$/ )
    {
    my ($bottom) = map /^(\d+)\t$workspace\t/g, reverse @lines;
    fifo "raise $bottom" if $bottom;
    }
  elsif( /^(stopkeys|solid|tabs|transparent|splash)$/ )
    {
    fifo $_;
    }
  elsif( /^(-h|--help)$/ )
    {
    help();
    }
  elsif( /^(-v|--version)$/ )
    {
    print "$0 $putilRK::VERSION\n";
    }
  else
    {
    warn "argument $_ is not valid";
    help();
    }
  }

sub LIST::listall
  {
  for (@lines)
    {
    my ($id, $ws, $geo, $title) = split /\t/;
    print "$0 raise $id #$title";
    }
  }

sub LIST::listallws
  {
  print "$0 ws '$_' #$_\n" for @workspaces;
  }

sub LIST::listgeometry
  {
  for (@lines)
    {
    my ($id, $ws, $geo, $title) = split /\t/;
    print "$0 raise $id ws '$ws' #$geo - $title";
    }
  }

sub LIST::listcurrentws
  {
  print "$workspace\n";
  }

sub LIST::listincurrentws
  {
  for (@lines)
    {
    my ($id, $ws, $geo, $title) = split /\t/;
    print "$0 raise $id #$title" if $ws eq $workspace;
    }
  }

sub LIST::listwithws
  {
  for (@lines)
    {
    my ($id, $ws, $geo, $title) = split /\t/;
    print "$0 raise $id ws '$ws' #$ws: $title";
    }
  }

sub LIST::listnosticky
  {
  for (@lines)
    {
    my ($id, $ws, $geo, $title) = split /\t/;
    print "$0 raise $id ws '$ws' #$ws: $title" unless $ws eq 'sticky';
    }
  }

sub LIST::listmoves
  {
  for (@lines)
    {
    my ($id, $ws, $geo, $title) = split /\t/;
    next if $ws eq $workspace;
    print "$0 movetocurrentws $id #$ws: $title";
    }
  }

sub LIST::AUTOLOAD
  {
  warn "unknown argument $_";
  help();
  }

sub help
  {
  print STDERR <<END;
arguments are any of:

listall             - list all windows in any workspace
listallws           - list all workspace names
listgeometry        - list all windows with geometry
listcurrentws       - print name of current workspace
listincurrentws     - list windows in current workspace
listwithws          - list windows with workspace they are in
listnosticky        - list windows with workspace except for sticky windows
listmoves           - list windows with workspace they are in
movetocurrentws ID  - move window to current workspace
movetows ID NAME    - move window to specified workspace
raise ID            - raise window to top of its workspace
raiseover ID ID2    - raise window over window2
lower ID            - lower window to bottom of its workspace
lowerunder ID ID2   - lower window below window2
xy ID X Y           - move window to (X,Y) position
setcurrentws NAME   - set current workspace to NAME and only map those windows
ws NAME             - set current workspace to NAME and only map those windows
newws               - change to a new workspace
forward             - go to next workspace (alphabetical order)
backward            - go to previous workspace
bottom              - raise bottom window on this workspace
bg colorname        - set root background color to colorname (temporarily)
color colorname     - set root background for ws to colorname (permanently)
stopkeys            - disable all key grabs
solid               - solid rectangular window decoration
tabs                - only short tab on non-focused windows
transparent         - transparent titles on non-focused windows
shieldstep N        - steps to drop shield
zoom N              - 1 for oval, 0 for drop shield
splash              - show splash screen
-v or --version
-h or --help
END
  exit(1);
  }

__END__
